NAME
    IO-stringy - I/O on in-core objects like strings and arrays

SYNOPSIS
        IO::
        ::AtomicFile   adpO  Write a file which is updated atomically     ERYQ
        ::Lines        bdpO  I/O handle to read/write to array of lines   ERYQ
        ::Scalar       RdpO  I/O handle to read/write to a string         ERYQ
        ::ScalarArray  RdpO  I/O handle to read/write to array of scalars ERYQ
        ::Wrap         RdpO  Wrap old-style FHs in standard OO interface  ERYQ
        ::WrapTie      adpO  Tie your handles & retain full OO interface  ERYQ

DESCRIPTION
    This toolkit primarily provides modules for performing both traditional
    and object-oriented i/o) on things *other* than normal filehandles; in
    particular, IO::Scalar, IO::ScalarArray, and IO::Lines.

    In the more-traditional IO::Handle front, we have IO::AtomicFile which
    may be used to painlessly create files which are updated atomically.

    And in the "this-may-prove-useful" corner, we have IO::Wrap, whose
    exported wraphandle() function will clothe anything that's not a blessed
    object in an IO::Handle-like wrapper... so you can just use OO syntax
    and stop worrying about whether your function's caller handed you a
    string, a globref, or a FileHandle.

WARNINGS
    Perl's TIEHANDLE spec was incomplete prior to 5.005_57; it was missing
    support for "seek()", "tell()", and "eof()". Attempting to use these
    functions with an IO::Scalar, IO::ScalarArray, IO::Lines, etc. will not
    work prior to 5.005_57. None of the relevant methods will be invoked by
    Perl; and even worse, this kind of bug can lie dormant for a while. If
    you turn warnings on (via $^W or "perl -w"), and you see something like
    this...

        seek() on unopened file

    ...then you are probably trying to use one of these functions on one of
    our IO:: classes with an old Perl. The remedy is to simply use the OO
    version; e.g.:

        $SH->seek(0,0);    ### GOOD: will work on any 5.005
        seek($SH,0,0);     ### WARNING: will only work on 5.005_57 and beyond

INSTALLATION
  Requirements
    As of version 2.x, this toolkit requires Perl 5.005 for the IO::Handle
    subclasses, and 5.005_57 or better is strongly recommended. See
    "WARNINGS" for details.

  Directions
    Most of you already know the drill...

        perl Makefile.PL
        make
        make test
        make install

    For everyone else out there... if you've never installed Perl code
    before, or you're trying to use this in an environment where your
    sysadmin or ISP won't let you do interesting things, relax: since this
    module contains no binary extensions, you can cheat. That means copying
    the directory tree under my "./lib" directory into someplace where your
    script can "see" it. For example, under Linux:

        cp -r IO-stringy-1.234/lib/* /path/to/my/perl/

    Now, in your Perl code, do this:

        use lib "/path/to/my/perl";
        use IO::Scalar;                   ### or whatever

    Ok, now you've been told. At this point, anyone who whines about not
    being given enough information gets an unflattering haiku written about
    them in the next change log. I'll do it. Don't think I won't.

VERSION
    $Id: README,v 1.2 2005/02/10 21:24:05 dfs Exp $

TO DO
    (2000/08/02) Finalize $/ support
        Graham Barr submitted this patch half a *year* ago; Like a moron, I
        lost his message under a ton of others, and only now have the
        experimental implementation done.

        Will the sudden sensitivity to $/ hose anyone out there? I'm
        worried, so you have to enable it explicitly in 1.x. It will be on
        by default in 2.x, though only IO::Scalar has been implemented.

    (2001/08/08) Remove IO::WrapTie from new IO:: classes
        It's not needed. Backwards compatibility could be maintained by
        having new_tie() be identical to new(). Heck, I'll bet that
        IO::WrapTie should be reimplemented so the returned object is just
        like an IO::Scalar in its use of globrefs.

AUTHOR
    Primary Maintainer
        Dianne Skoll (dfs@roaringpenguin.com).

    Original Author
        Eryq (eryq@zeegee.com). President, ZeeGee Software Inc
        (http://www.zeegee.com).

    Co-Authors
        For all their bug reports and patch submissions, the following are
        officially recognized:

             Richard Jones
             B. K. Oxley (binkley)
             Doru Petrescu
             Doug Wilson (for picking up the ball I dropped, and doing tie() right)

    Go to http://www.zeegee.com for the latest downloads and on-line
    documentation for this module.

    Enjoy. Yell if it breaks.
